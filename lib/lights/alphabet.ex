defmodule Lights.Alphabet do
  @alphabet %{
    32 => [
      [0,0,0,0,0,0],
      [0,0,0,0,0,0],
      [0,0,0,0,0,0],
      [0,0,0,0,0,0],
      [0,0,0,0,0,0],
    ],
    ?A => [
      [1,1,1,1,1,0],
      [1,0,0,0,1,0],
      [1,1,1,1,1,0],
      [1,0,0,0,1,0],
      [1,0,0,0,1,0],
    ],
    ?B => [
      [1,1,1,1,0,0],
      [1,0,0,0,1,0],
      [1,1,1,1,1,0],
      [1,0,0,0,1,0],
      [1,1,1,1,0,0],
    ],
    ?C => [
      [1,1,1,1,1,0],
      [1,0,0,0,0,0],
      [1,0,0,0,0,0],
      [1,0,0,0,0,0],
      [1,1,1,1,1,0],
    ],
    ?D => [
      [1,1,1,1,0,0],
      [1,0,0,0,1,0],
      [1,0,0,0,1,0],
      [1,0,0,0,1,0],
      [1,1,1,1,0,0],
    ],
    ?E => [
      [1,1,1,1,1,0],
      [1,0,0,0,0,0],
      [1,1,1,0,0,0],
      [1,0,0,0,0,0],
      [1,1,1,1,1,0],
    ],
    ?F => [
      [1,1,1,1,1,0],
      [1,0,0,0,0,0],
      [1,1,1,0,0,0],
      [1,0,0,0,0,0],
      [1,0,0,0,0,0],
    ],
    ?G => [
      [1,1,1,1,1,0],
      [1,0,0,0,0,0],
      [1,0,1,1,1,0],
      [1,0,0,0,1,0],
      [1,1,1,1,1,0],
    ],
    ?H => [
      [1,0,0,0,1,0],
      [1,0,0,0,1,0],
      [1,0,1,1,1,0],
      [1,0,0,0,1,0],
      [1,0,0,0,1,0],
    ],
    ?I => [
      [1,1,1,1,1,0],
      [0,0,1,0,0,0],
      [0,0,1,0,0,0],
      [0,0,1,0,0,0],
      [1,1,1,1,1,0],
    ],
    ?J => [
      [0,0,0,0,1,0],
      [0,0,0,0,1,0],
      [0,0,0,0,1,0],
      [1,0,0,0,1,0],
      [1,1,1,1,1,0],
    ],
    ?K => [
      [0,0,0,0,1,0],
      [0,0,0,0,1,0],
      [0,0,0,0,1,0],
      [1,0,0,0,1,0],
      [1,1,1,1,1,0],
    ],
    ?L => [
      [1,0,0,0,0,0],
      [1,0,0,0,0,0],
      [1,0,0,0,0,0],
      [1,0,0,0,0,0],
      [1,1,1,1,1,0],
    ],
    ?M => [
      [1,0,0,0,1,0],
      [1,1,0,1,1,0],
      [1,0,1,0,1,0],
      [1,0,0,0,1,0],
      [1,0,0,0,1,0],
    ],
    ?N => [
      [1,0,0,0,1,0],
      [1,1,0,0,1,0],
      [1,0,1,0,1,0],
      [1,0,0,1,1,0],
      [1,0,0,0,1,0],
    ],
    ?O => [
      [1,1,1,1,1,0],
      [1,0,0,0,1,0],
      [1,0,0,0,1,0],
      [1,0,0,0,1,0],
      [1,1,1,1,1,0],
    ],
    ?P => [
      [1,1,1,1,0,0],
      [1,0,0,0,1,0],
      [1,1,1,1,1,0],
      [1,0,0,0,0,0],
      [1,0,0,0,0,0],
    ],
    ?Q => [
      [1,1,1,1,0,0],
      [1,0,0,1,0,0],
      [1,0,0,1,0,0],
      [1,0,1,1,0,0],
      [1,1,1,1,1,0],
    ],
    ?R => [
      [1,1,1,1,0,0],
      [1,0,0,0,1,0],
      [1,1,1,1,1,0],
      [1,0,0,1,0,0],
      [1,0,0,0,1,0],
    ],
    ?S => [
      [1,1,1,1,1,0],
      [1,0,0,0,0,0],
      [1,1,1,1,1,0],
      [0,0,0,0,1,0],
      [1,1,1,1,1,0],
    ],
    ?T => [
      [1,1,1,1,1,0],
      [0,0,1,0,0,0],
      [0,0,1,0,0,0],
      [0,0,1,0,0,0],
      [0,0,1,0,0,0],
    ],
    ?U => [
      [1,0,0,0,1,0],
      [1,0,0,0,1,0],
      [1,0,0,0,1,0],
      [1,0,0,0,1,0],
      [1,1,1,1,1,0],
    ],
    ?V => [
      [1,0,0,0,1,0],
      [1,0,0,0,1,0],
      [1,0,0,0,1,0],
      [0,1,0,1,0,0],
      [0,0,1,0,0,0],
    ],
    ?W => [
      [1,0,0,0,1,0],
      [1,0,0,0,1,0],
      [1,0,1,0,1,0],
      [1,1,0,1,1,0],
      [1,0,0,0,1,0],
    ],
    ?X => [
      [1,0,0,0,1,0],
      [0,1,0,1,0,0],
      [0,0,1,0,0,0],
      [0,1,0,1,0,0],
      [1,0,0,0,1,0],
    ],
    ?Y => [
      [1,0,0,0,1,0],
      [0,1,0,1,0,0],
      [0,0,1,0,0,0],
      [0,0,1,0,0,0],
      [0,0,1,0,0,0],
    ],
    ?Z => [
      [1,1,1,1,1,0],
      [0,0,0,1,0,0],
      [0,0,1,0,0,0],
      [0,1,0,0,0,0],
      [1,1,1,1,1,0],
    ],
  }

  def pixels(letter) do
    Map.fetch!(@alphabet, letter)
  end
end
